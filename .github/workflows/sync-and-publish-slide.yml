name: Sync and Deploy Slide

on:
  repository_dispatch:
    types: [sync-slides]

permissions:
  contents: write
  pages: write
  id-token: write

env:
  TEMP_IMAGES: temp-images
  TEMP_IMAGES_CRUNCHED: temp-images-crunched
  OUTPUT_DIR: public/${{ vars.SLIDES_SUBDIR || 'slides' }}
  MIPMAP_ENABLED: false

concurrency:
  group: "sync"
  cancel-in-progress: false

jobs:
  download:
    runs-on: ubuntu-latest
    outputs:
      job-status: ${{ job.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Notify start
        run: |
          curl -X POST ${{ secrets.APP_URL }}/api/public/sync/${{ github.event.client_payload.syncId }}/step \
          -H "Content-Type: application/json" \
          -d "{\"step\": \"download\"}"

      - name: Download slides
        env:
          SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          SERVICE_ACCOUNT_JSON_PATH: "./service-account.json"
          SLIDES_CONFIG: ${{ toJSON(github.event.client_payload.slides) }}
          TEMP_DIR: ${{ env.TEMP_IMAGES }}
        run: |
          echo "$SERVICE_ACCOUNT_JSON" > service-account.json
          mkdir -p $TEMP_DIR
          node ./scripts/download-slides.js

      - name: Upload raw images
        uses: actions/upload-artifact@v4
        with:
          name: raw-images
          path: ${{ env.TEMP_IMAGES }}
          retention-days: 1

  process:
    needs: download
    runs-on: ubuntu-latest
    outputs:
      job-status: ${{ job.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download raw images
        uses: actions/download-artifact@v4
        with:
          name: raw-images
          path: ${{ env.TEMP_IMAGES }}

      - name: Notify crunch start
        run: |
          curl -X POST ${{ secrets.APP_URL }}/api/public/sync/${{ github.event.client_payload.syncId }}/step \
          -H "Content-Type: application/json" \
          -d "{\"step\": \"compress\"}"

      - name: Crunch images
        uses: tp-jp/unity-export-crunched-action@v1
        with:
          input-path: ${{ env.TEMP_IMAGES }}
          output-path: ${{ env.TEMP_IMAGES_CRUNCHED }}
          unity-email: ${{ secrets.UNITY_EMAIL }}
          unity-password: ${{ secrets.UNITY_PASSWORD }}
          unity-license: ${{ secrets.UNITY_LICENSE }}
          unity-version: "2022.3.22f1"
          mipmap-enabled: ${{ env.MIPMAP_ENABLED }}
          max-size: "2048"
          compression-quality: "50"

      - name: Notify combine start
        run: |
          curl -X POST ${{ secrets.APP_URL }}/api/public/sync/${{ github.event.client_payload.syncId }}/step \
          -H "Content-Type: application/json" \
          -d "{\"step\": \"combine\"}"

      - name: Combine images
        env:
          INPUT_DIR: ${{ env.TEMP_IMAGES_CRUNCHED }}
          OUTPUT_DIR: ${{ env.OUTPUT_DIR }}
          MIPMAP_ENABLED: ${{ env.MIPMAP_ENABLED }}
        run: |
          rm -f $OUTPUT_DIR/*.bin
          node ./scripts/combine-images.js

      - name: Upload processed content
        uses: actions/upload-artifact@v4
        with:
          name: processed-content
          path: public
          retention-days: 1

  commit:
    needs: process
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
      job-status: ${{ job.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean output directory
        env:
          OUTPUT_DIR: ${{ env.OUTPUT_DIR }}
        run: |
          rm -f $OUTPUT_DIR/*.bin

      - name: Download processed content
        uses: actions/download-artifact@v4
        with:
          name: processed-content
          path: public

      - name: Notify commit start
        run: |
          curl -X POST ${{ secrets.APP_URL }}/api/public/sync/${{ github.event.client_payload.syncId }}/step \
          -H "Content-Type: application/json" \
          -d "{\"step\": \"commit\"}"

      - name: Check and commit changes
        id: check
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add --all
          if ! git diff-index --quiet HEAD --; then
            git commit -m "Update slides"
            git push
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: commit
    if: needs.commit.outputs.has_changes == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    outputs:
      job-status: ${{ job.status }}
      page-url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download processed content
        uses: actions/download-artifact@v4
        with:
          name: processed-content
          path: public

      - name: Notify deploy start
        run: |
          curl -X POST ${{ secrets.APP_URL }}/api/public/sync/${{ github.event.client_payload.syncId }}/step \
          -H "Content-Type: application/json" \
          -d "{\"step\": \"deploy\"}"

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify-result:
    needs: [download, process, commit, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify completion
        run: |
          if [[ "${{ needs.download.result }}" != "success" ]]; then
            status="failed"
            error="Download failed: ${{ needs.download.result }}"
          elif [[ "${{ needs.process.result }}" != "success" ]]; then
            status="failed"
            error="Process failed: ${{ needs.process.result }}"
          elif [[ "${{ needs.commit.result }}" != "success" ]]; then
            status="failed"
            error="Commit failed: ${{ needs.commit.result }}"
          elif [[ "${{ needs.deploy.result }}" != "success" && "${{ needs.deploy.result }}" != "skipped" ]]; then
            status="failed"
            error="Deploy failed: ${{ needs.deploy.result }}"
          else
            status="completed"
            error=""
          fi

          curl -X POST ${{ secrets.APP_URL }}/api/public/sync/${{ github.event.client_payload.syncId }}/status \
            -H "Content-Type: application/json" \
            -d "{\"status\": \"$status\", \"errorMessage\": \"$error\"}"
